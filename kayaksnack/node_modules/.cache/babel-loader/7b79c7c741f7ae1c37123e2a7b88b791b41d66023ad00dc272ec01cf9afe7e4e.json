{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\980020889\\\\Documents\\\\GitHub\\\\Front-end\\\\kayaksnack\\\\src\\\\components\\\\IngredienteInputs.js\";\n// src/components/IngredienteInputs.js\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IngredienteInputs = ({\n  label,\n  placeholder,\n  suggestions,\n  // Array de strings con las sugerencias de ingredientes\n  currentValue,\n  onValueChange,\n  onAddClick,\n  isDisabled,\n  errorMessage\n}) => {\n  // Genera un ID único para el datalist para que coincida con el input\n  // Esto es IMPORTANTE. Si el ID no es único o no coincide, el datalist no funcionará.\n  const dataListId = `suggestions-${Math.random().toString(36).substring(2, 9)}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"campo-grupo\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"ingrediente-input\",\n      className: \"etiqueta-campo\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-con-boton\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"ingrediente-input\" // Este ID es usado por el label\n        ,\n        className: \"input-text\",\n        placeholder: placeholder,\n        value: currentValue,\n        onChange: e => onValueChange(e.target.value),\n        onKeyPress: e => {\n          if (e.key === 'Enter') {\n            e.preventDefault();\n            onAddClick();\n          }\n        },\n        list: dataListId // <--- ¡AQUÍ ES DONDE SE CONECTA EL INPUT CON EL DATALIST!\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onAddClick,\n        className: \"boton-a\\xF1adir\",\n        disabled: isDisabled,\n        children: \"A\\xF1adir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), suggestions && suggestions.length > 0 &&\n      /*#__PURE__*/\n      // Aseguramos que haya sugerencias antes de renderizar\n      _jsxDEV(\"datalist\", {\n        id: dataListId,\n        children: suggestions.map((ingrediente, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: ingrediente\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mensaje-error\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_c = IngredienteInputs;\nexport default IngredienteInputs;\nvar _c;\n$RefreshReg$(_c, \"IngredienteInputs\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","IngredienteInputs","label","placeholder","suggestions","currentValue","onValueChange","onAddClick","isDisabled","errorMessage","dataListId","Math","random","toString","substring","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","e","target","onKeyPress","key","preventDefault","list","onClick","disabled","length","map","ingrediente","index","_c","$RefreshReg$"],"sources":["C:/Users/980020889/Documents/GitHub/Front-end/kayaksnack/src/components/IngredienteInputs.js"],"sourcesContent":["// src/components/IngredienteInputs.js\r\nimport React from 'react';\r\n\r\nconst IngredienteInputs = ({\r\n    label,\r\n    placeholder,\r\n    suggestions, // Array de strings con las sugerencias de ingredientes\r\n    currentValue,\r\n    onValueChange,\r\n    onAddClick,\r\n    isDisabled,\r\n    errorMessage\r\n}) => {\r\n    // Genera un ID único para el datalist para que coincida con el input\r\n    // Esto es IMPORTANTE. Si el ID no es único o no coincide, el datalist no funcionará.\r\n    const dataListId = `suggestions-${Math.random().toString(36).substring(2, 9)}`;\r\n\r\n    return (\r\n        <div className=\"campo-grupo\">\r\n            <label htmlFor=\"ingrediente-input\" className=\"etiqueta-campo\">\r\n                {label}\r\n            </label>\r\n            <div className=\"input-con-boton\">\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"ingrediente-input\" // Este ID es usado por el label\r\n                    className=\"input-text\"\r\n                    placeholder={placeholder}\r\n                    value={currentValue}\r\n                    onChange={(e) => onValueChange(e.target.value)}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === 'Enter') {\r\n                            e.preventDefault();\r\n                            onAddClick();\r\n                        }\r\n                    }}\r\n                    list={dataListId} // <--- ¡AQUÍ ES DONDE SE CONECTA EL INPUT CON EL DATALIST!\r\n                />\r\n                <button\r\n                    type=\"button\"\r\n                    onClick={onAddClick}\r\n                    className=\"boton-añadir\"\r\n                    disabled={isDisabled}\r\n                >\r\n                    Añadir\r\n                </button>\r\n                {/* <--- ¡ESTE ES EL DATALIST QUE MUESTRA EL MENÚ DE OPCIONES! */}\r\n                {suggestions && suggestions.length > 0 && ( // Aseguramos que haya sugerencias antes de renderizar\r\n                    <datalist id={dataListId}>\r\n                        {suggestions.map((ingrediente, index) => (\r\n                            <option key={index} value={ingrediente} />\r\n                        ))}\r\n                    </datalist>\r\n                )}\r\n            </div>\r\n            {errorMessage && <p className=\"mensaje-error\">{errorMessage}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IngredienteInputs;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGA,CAAC;EACvBC,KAAK;EACLC,WAAW;EACXC,WAAW;EAAE;EACbC,YAAY;EACZC,aAAa;EACbC,UAAU;EACVC,UAAU;EACVC;AACJ,CAAC,KAAK;EACF;EACA;EACA,MAAMC,UAAU,GAAG,eAAeC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;EAE9E,oBACId,OAAA;IAAKe,SAAS,EAAC,aAAa;IAAAC,QAAA,gBACxBhB,OAAA;MAAOiB,OAAO,EAAC,mBAAmB;MAACF,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EACxDd;IAAK;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACRrB,OAAA;MAAKe,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC5BhB,OAAA;QACIsB,IAAI,EAAC,MAAM;QACXC,EAAE,EAAC,mBAAmB,CAAC;QAAA;QACvBR,SAAS,EAAC,YAAY;QACtBZ,WAAW,EAAEA,WAAY;QACzBqB,KAAK,EAAEnB,YAAa;QACpBoB,QAAQ,EAAGC,CAAC,IAAKpB,aAAa,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,UAAU,EAAGF,CAAC,IAAK;UACf,IAAIA,CAAC,CAACG,GAAG,KAAK,OAAO,EAAE;YACnBH,CAAC,CAACI,cAAc,CAAC,CAAC;YAClBvB,UAAU,CAAC,CAAC;UAChB;QACJ,CAAE;QACFwB,IAAI,EAAErB,UAAW,CAAC;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrB,CAAC,eACFrB,OAAA;QACIsB,IAAI,EAAC,QAAQ;QACbU,OAAO,EAAEzB,UAAW;QACpBQ,SAAS,EAAC,iBAAc;QACxBkB,QAAQ,EAAEzB,UAAW;QAAAQ,QAAA,EACxB;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAERjB,WAAW,IAAIA,WAAW,CAAC8B,MAAM,GAAG,CAAC;MAAA;MAAM;MACxClC,OAAA;QAAUuB,EAAE,EAAEb,UAAW;QAAAM,QAAA,EACpBZ,WAAW,CAAC+B,GAAG,CAAC,CAACC,WAAW,EAAEC,KAAK,kBAChCrC,OAAA;UAAoBwB,KAAK,EAAEY;QAAY,GAA1BC,KAAK;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAuB,CAC5C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CACb;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,EACLZ,YAAY,iBAAIT,OAAA;MAAGe,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAEP;IAAY;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/D,CAAC;AAEd,CAAC;AAACiB,EAAA,GAvDIrC,iBAAiB;AAyDvB,eAAeA,iBAAiB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}